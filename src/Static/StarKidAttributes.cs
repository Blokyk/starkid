#nullable enable
// <auto-generated/>

using System;

namespace StarKid
{
    [System.AttributeUsage(System.AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class CommandAttribute : System.Attribute
    {
        public string CmdName { get; }
        public string? ShortDesc { get; set; }

        public CommandAttribute(string cmdName) => CmdName = cmdName;

        public void Deconstruct(
            out string cmdName,
            out string? desc
        )
        {
            cmdName = CmdName;
            desc = ShortDesc;
        }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
    public sealed class CommandGroupAttribute : System.Attribute
    {
        public string GroupName { get; }
        public string? DefaultCmdName { get; set; }
        public string? ShortDesc { get; set; }

        public CommandGroupAttribute(string groupName)
            => GroupName = groupName;

        public void Deconstruct(
            out string groupName,
            out string? defaultCmd,
            out string? shortDesc
        )
        {
            groupName = GroupName;
            defaultCmd = DefaultCmdName;
            shortDesc = ShortDesc;
        }
    }

    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, Inherited = false, AllowMultiple = false)]
    public sealed class OptionAttribute : System.Attribute
    {
        public string LongName { get; }
        public char Alias { get; }

        public string? ArgName { get; set; }

        public bool IsGlobal { get; set; }

        public OptionAttribute(string longName) : this(longName, '\0') {}

        public OptionAttribute(string longName, char shortName) {
            LongName = longName;
            Alias = shortName;
        }

        public void Deconstruct(
            out string longName,
            out char alias,
            out string? argName
        )
        {
            longName = LongName;
            alias = Alias;
            argName = ArgName;
        }
    }

    /// <summary>
    /// Indicates the function used to convert the raw string argument into the desired type
    /// </summary>
    /// <remarks>
    /// The parsing function must take a single string parameter, and returns either the target type, or any of: <see cref="void" />, <see cref="System.Boolean" />, <see cref="System.Int32" />, <see cref="System.String" />? or <see cref="System.Exception" />?.
    /// </remarks>
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, Inherited = false, AllowMultiple = false)]
    public sealed class ParseWithAttribute : System.Attribute
    {
        public string ParserName { get; }

        public ParseWithAttribute(string nameofParsingMethod)
            => ParserName = nameofParsingMethod;
    }

    /// <summary>
    /// Indicates the function used to validate the argument/option
    /// </summary>
    /// <remarks>
    /// The validating function must take a single parameter of this symbol's type and return <see cref="System.Boolean"/> or <see cref="System.Exception"/>.
    /// </remarks>
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, Inherited = false, AllowMultiple = true)]
    public sealed class ValidateWithAttribute : System.Attribute
    {
        public string ValidatorName { get; }
        public string? ErrorMessage { get; set; }

        public ValidateWithAttribute(string nameofValidatorMethod)
            => ValidatorName = nameofValidatorMethod;

        public ValidateWithAttribute(string nameofValidatorMethod, string errorMessage)
            : this(nameofValidatorMethod)
            => ErrorMessage = errorMessage;
    }
}